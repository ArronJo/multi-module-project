# .editorconfig
#
# Reference
# https://pinterest.github.io/ktlint/1.6.0/rules/configuration-ktlint/
# https://pinterest.github.io/ktlint/0.49.1/rules/code-styles/
# https://pinterest.github.io/ktlint/0.49.1/rules/standard/
#
# https://editorconfig.org/
#

# task 캐시로 인해 옵션 반영이 누락된 경우
# $ ./gradlew ktlintCheck --rerun-tasks --no-build-cache

# top-most EditorConfig file
# 해당 .editorconfig 파일이 해당 디렉토리에서 최상위 설정 파일임을 명시하는 것을 의미합니다.
# 이 설정은 Ktlint가 .editorconfig 파일을 찾을 때, 이 파일이 발견된 디렉토리부터 상위로 더 이상 탐색하지 않고 해당 파일에서 설정을 적용하도록 지시하는 역할을 합니다.
root = true


######################################
# all files
# noinspection EditorConfigKeyCorrectness
[*]
charset = utf-8
end_of_line = lf
insert_final_newline = true
ktlint_code_style = intellij_idea
#indent_size = 4
#indent_style = space
#max_line_length = 120
#tab_width = 4
#trim_trailing_whitespace = true
#ij_continuation_indent_size = 8


######################################
# gradle
# noinspection EditorConfigKeyCorrectness
#[*.gradle.kts]
#ktlint = disabled


######################################
# kotlin
# noinspection EditorConfigKeyCorrectness
[*.{kt,kts}]
indent_size = 4
indent_style = space

# 실험적인(experimental) 코드 스타일 규칙을 활성화
ktlint_experimental = disabled

# Imports must be ordered in lexicographic order without any empty lines in-between with "java", "javax", "kotlin" and aliases in the end (standard:import-ordering)
ktlint_standard_import-ordering = disabled

# Wildcard import (cannot be auto-corrected) (standard:no-wildcard-imports)
# 와일드카드 import 금지
ktlint_standard_no-wildcard-imports = enabled
# 옵션 - IntelliJ에서도 일관되게 하려면 추가
#ij_kotlin_imports_layout=*,java.**,javax.**,kotlin.**
#ij_kotlin_imports_optimize=true
#ij_kotlin_allow_wildcard_imports=false

# Property name should start with a lowercase letter and use camel case (cannot be auto-corrected) (standard:property-naming)
#ktlint_standard:property-naming = disabled

# File 'xxx.kt' contains a single class and possibly also extension functions for that class and should be named same after that class 'xxY' (cannot be auto-corrected) (standard:filename)
# 파일 이름과 클래스 이름 불일치에 대해 검사 여부 (기본값으로 enabled)
ktlint_standard_filename = enabled

# annotation 관련 코딩 스타일 가이드 준수 여부 (기본값으로 enabled)
ktlint_standard_annotation = enabled

# Missing newline after "(",  Missing newline before ")"
ktlint_standard_wrapping = disabled

# Skipping rule(s) which are depending on a rule which is not loaded.
# Please check if you need to add additional rule sets before creating an issue.
#   - Rule with id 'RuleId(value=standard:trailing-comma-on-call-site)' requires rule with id 'RuleId(value=standard:wrapping)' to be loaded
#   - Rule with id 'RuleId(value=standard:trailing-comma-on-declaration-site)' requires rule with id 'RuleId(value=standard:wrapping)' to be loaded
# 함수 호출 시 인자의 마지막 부분에 후행 쉼표(trailing comma)를 강제화
ktlint_standard_trailing-comma-on-call-site = disabled
# Missing trailing comma before ")" (standard:trailing-comma-on-declaration-site)
ktlint_standard_trailing-comma-on-declaration-site = disabled

# Missing space after // (standard:comment-spacing)
# 주석 사용시 무조건 space 가 필요함
ktlint_standard_comment-spacing = disabled

# 주석 관련
# 주석 경고 비활성화
#ktlint_standard_commented-code = disabled
#ktlint_standard_no-consecutive-comments = disabled
#ktlint_standard_no-unused-imports = disabled
# 주석 줄바꿈 경고 비활성화
#ktlint_standard_comment-wrapping = disabled
# EOL 주석 경고 비활성화
#ktlint_standard_no-empty-first-line-in-method-block = disabled
# 모든 주석 관련 규칙 비활성화
#ktlint_standard = disabled

# Unexpected blank line(s) before "}" (standard:no-blank-line-before-rbrace)
ktlint_standard_no-blank-line-before-rbrace = disabled

# Missing newline before '}' (standard:statement-wrapping)
ktlint_standard_statement-wrapping = disabled

# A comment in a 'value_argument_list' is only allowed when placed on a separate line (cannot be auto-corrected) (standard:discouraged-comment-location)
ktlint_standard_discouraged-comment-location = disabled

#  Property name should start with a lowercase letter and use camel case (standard:property-naming)
#ktlint_standard_property-naming = disabled

# Multi-line 이면 NewLine 에서 시작
#ktlint_standard_string-template-indent = disabled
# 우변이 Multi Line 일 경우 새로운 Line 에서 시작
#ktlint_standard_multiline-expression-wrapping = disabled

# Function body should be replaced with body expression (standard:function-expression-body)
# 단일 표현식으로 이루어진 함수를 = [식] 형태로 표현해야 한다.
# 예시) fun sum(a: Int, b: Int) = a + b
ktlint_standard_function-expression-body = disabled

# A comment inside or on same line after a 'value_parameter' is not allowed.
# It may be placed on a separate line above. (cannot be auto-corrected) (standard:value-parameter-comment)
ktlint_standard_value-parameter-comment = disabled

# Newline expected before operand in multiline condition (standard:condition-wrapping)
ktlint_standard_condition-wrapping = disabled

# First line of body expression fits on same line as function signature (standard:function-signature)
# Function signature should be replaced with function declaration (standard:function-signature)
# 함수 본문이 여러 줄로 이어질 경우 시그니처와 본문 사이에 줄 바꿈을 어떻게 처리하는지에 대한 설정을 제어
# 예시) (X) fun error(t: Throwable?, msg: () -> Any?): Unit =
#              logger.error(t, msg)
#      (O) fun error(t: Throwable?, msg: () -> Any?): Unit = logger.error(t, msg)
ktlint_standard_function-signature = disabled

# File must end with a newline (\n) (standard:final-newline)
#ktlint_standard_final-newline = disabled

# Unnecessary long whitespace (standard:no-multi-spaces)
#ktlint_standard_no-multi-spaces = disabled

# Unexpected spacing after "(" (standard:paren-spacing)
#ktlint_standard_paren-spacing = disabled

# Trailing space(s) (standard:no-trailing-spaces)
#ktlint_standard_no-trailing-spaces = disabled

# 모든 arguments는 single line 으로 위치해야 함. 이 옵션이 영향도가 좀 크네...
# Argument should be on a separate line (unless all arguments can fit a single line) (standard:argument-list-wrapping)
#ktlint_standard_argument-list-wrapping = disabled

# Add a blank line between all when-condition in case at least one multiline when-condition is found in the statement (standard:blank-line-between-when-conditions)
# when 문 내에 여러 줄로 구성된 조건(multiline when-condition)이 하나라도 있을 경우, 다른 모든 when-condition 사이에도 일관적으로 빈 줄을 추가하여 각 조건 블록을 명확하게 구분하도록 합니다.
ktlint_standard_blank-line-between-when-conditions = disabled
ktlint_standard_when-without-else = disabled


######################################
# yaml
#[*.{yml,yaml}]
#indent_size = 2


######################################
# markdown
#[*.{md,mdx}]
#trim_trailing_whitespace = false